name: Leaderboard Contest

on:
  pull_request_target:
    types: [opened, synchronize]
  push:
    branches: [ main ]
    paths:
      - 'submissions_full.csv'
      - 'submissions/*.py'

# Job 1: Run on every Pull Request to evaluate the code
jobs:
Â  pr_check:
Â  Â  if: github.event_name == 'pull_request_target'
Â  Â  runs-on: ubuntu-latest
Â  Â  timeout-minutes: 7
Â  Â  steps:

    # 1. Checkout Main Branch (Authoritative Content)
    # This downloads all the correct scripts and requirements files (like evaluate_submission.py and ci_requirements.txt)
Â  Â  - name: 1. Checkout Main Branch
Â  Â  Â  uses: actions/checkout@v4
Â  Â  Â  with:
Â  Â  Â  Â  ref: ${{ github.event.pull_request.base.sha }} 
Â  Â  Â  Â  fetch-depth: 0

    # 2. Identify and Inject Submission File from Fork
    # This surgically extracts ONLY the submission file from the PR branch and places it into the main repo structure.
Â  Â  - name: 2. Inject Submission File from Fork
Â  Â  Â  id: fetch_submission
Â  Â  Â  run: |
Â  Â  Â  Â  git fetch 'https://github.com/${{ github.event.pull_request.head.repo.full_name }}' '${{ github.event.pull_request.head.sha }}'
Â  Â  Â  Â  SUBMISSION_FILE=$(git diff --name-only ${{ github.event.pull_request.base.sha }} FETCH_HEAD | grep 'submissions/.*\.py' | head -n 1)

Â  Â  Â  Â  if [ -z "$SUBMISSION_FILE" ]; then
Â  Â  Â  Â  Â  Â  echo "No valid submission file found in the PR. Exiting."
Â  Â  Â  Â  Â  Â  exit 1
Â  Â  Â  Â  fi
Â  Â  Â  Â  
Â  Â  Â  Â  git show FETCH_HEAD:$SUBMISSION_FILE > $SUBMISSION_FILE
Â  Â  Â  Â  echo "SUBMISSION_FILE=$SUBMISSION_FILE" >> $GITHUB_OUTPUT
Â  Â  Â  Â  TEAM_NAME=$(basename $SUBMISSION_FILE .py | sed 's/submissions\///')
Â  Â  Â  Â  echo "TEAM_NAME=$TEAM_NAME" >> $GITHUB_OUTPUT

    # 3. Set up Python (continues after the injection)
    - name: 3. Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
        
    - name: 4. Install uv
      run: pip install uv
      
    # 5. Optimized Installation Steps (Fixes 4-minute download)
    - name: 5. Install Standard Dependencies (Fast from PyPI)
      run: uv pip install -r ci_requirements.txt
      
    - name: 6. Install PyTorch CPU-Only (Forced via Index)
      run: uv pip install torch==2.8.0 torchvision==0.23.0 --index-url https://download.pytorch.org/whl/cpu

    # 7. Run Evaluation Script (The final step)
    - name: 7. Run Evaluation Script
      run: python evaluate_submission.py --submission ${{ steps.fetch_submission.outputs.SUBMISSION_FILE }}

    - name: 8. Post metrics as PR comment
      uses: marocchino/sticky-pull-request-comment@v2
      with:
        header: pr-submission-metrics
        message: |
          ### Submission Evaluation Complete
          
          âœ… **Code passed all checks.**
          
          The full performance metrics are available in the artifact attached to this workflow run. Please review them before merging.
        
  # Job 2: Run only on successful merges to 'main' or direct pushes to update the leaderboard
  update_leaderboard:
    if: github.event_name == 'push' && contains(join(github.event.commits.*.message), 'Merge pull request')
    runs-on: ubuntu-latest
    needs: pr_check
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0
        
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'

    - name: Install uv and dependencies
      run: |
        pip install uv
        uv pip install --system -r ci_requirements.txt

    - name: Install PyTorch 
      run: uv pip install torch==2.8.0 torchvision==0.23.0 --index-url https://download.pytorch.org/whl/cpu

    - name: Identify new submissions to evaluate
      id: new_files
      run: |
        # Find all .py files added in the latest commit
        NEW_FILES=$(git diff --name-only HEAD^ HEAD | grep 'submissions/.*\.py' | tr '\n' ' ')
        echo "NEW_FILES=$NEW_FILES" >> $GITHUB_OUTPUT
        
    - name: Evaluate and append new submissions to submissions_full.csv
      # Loop through the files merged in the PR
      run: |
        for SUBMISSION_FILE in ${{ steps.new_files.outputs.NEW_FILES }}; do
          echo "Processing new submission: $SUBMISSION_FILE"
          python evaluate_submission.py --submission $SUBMISSION_FILE --append-to submissions_full.csv
        done
        
    - name: Generate and commit new leaderboard.csv
      # The generate script reads submissions_full.csv and creates leaderboard.csv
      run: python generate_leaderboard.py

    - name: Push updated CSV files
      uses: stefanzweifel/git-auto-commit-action@v5
      with:
        commit_message: "ðŸ¤– Leaderboard updated with new submissions"
        file_pattern: 'submissions_full.csv leaderboard.csv'
        skip_dirty_check: true

