name: Leaderboard Contest

on:
  pull_request_target:
    types: [opened, synchronize]
  push:
    branches: [ main ]
    paths:
      - 'submissions_full.csv'
      - 'submissions/*.py'

# Job 1: Run on every Pull Request to evaluate the code
jobs:
  pr_check:
    if: github.event_name == 'pull_request_target'
    runs-on: ubuntu-latest
    timeout-minutes: 7
    steps:

    # Step 1: Checkout Main Branch (Authoritative Content)
    - name: 1. Checkout Main Branch
      uses: actions/checkout@v4
      with:
        ref: ${{ github.event.pull_request.base.sha }} 
        fetch-depth: 0

    # Step 2: Inject Submission File from Fork
    - name: 2. Inject Submission File from Fork
      id: fetch_submission
      run: |
        # 1. Construct the repository URL securely
        REPO_URL="https://github.com/${{ github.event.pull_request.head.repo.full_name }}"

        # 2. Fetch the head commit using the shell variable
        git fetch "$REPO_URL" "${{ github.event.pull_request.head.sha }}"
        
        # 3. Use git ls-tree to list all files in the fetched commit's history.
        # ðŸ›‘ CRITICAL FIX: Pipe through 'tr -d "\n"' to remove the trailing newline from the variable.
        SUBMISSION_FILE=$(git ls-tree --name-only -r FETCH_HEAD | grep 'submissions/.*\.py' | head -n 1 | tr -d '\n')

        if [ -z "$SUBMISSION_FILE" ]; then
            echo "No valid submission file found in the PR. Exiting."
            exit 1
        fi
        
        # This line should now work perfectly as the variable is clean
        git show FETCH_HEAD:$SUBMISSION_FILE > "$SUBMISSION_FILE"
        
        echo "SUBMISSION_FILE=$SUBMISSION_FILE" >> $GITHUB_OUTPUT
        TEAM_NAME=$(basename $SUBMISSION_FILE .py | sed 's/submissions\///')
        echo "TEAM_NAME=$TEAM_NAME" >> $GITHUB_OUTPUT

    # Step 3: Set up Python
    - name: 3. Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
        
    - name: 4. Install uv
      run: pip install uv
      
    # Step 5: Install Standard Dependencies (Fast from PyPI)
    - name: 5. Install Standard Dependencies (Fast from PyPI)
      run: uv pip install -r ci_requirements.txt
      
    # Step 6: Install PyTorch CPU-Only (Forced via Index)
    - name: 6. Install PyTorch CPU-Only (Forced via Index)
      run: uv pip install torch==2.8.0 torchvision==0.23.0 --index-url https://download.pytorch.org/whl/cpu

    # Step 7: Run Evaluation Script
    - name: 7. Run Evaluation Script
      run: python evaluate_submission.py --submission ${{ steps.fetch_submission.outputs.SUBMISSION_FILE }}

    - name: 8. Post metrics as PR comment
      uses: marocchino/sticky-pull-request-comment@v2
      with:
        header: pr-submission-metrics
        message: |
          ### Submission Evaluation Complete
          
          âœ… **Code passed all checks.**
          
          The full performance metrics are available in the artifact attached to this workflow run. Please review them before merging.
        
  # Job 2: Run only on successful merges to 'main' or direct pushes to update the leaderboard
  update_leaderboard:
    if: github.event_name == 'push' && contains(join(github.event.commits.*.message), 'Merge pull request')
    runs-on: ubuntu-latest
    needs: pr_check
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0
        
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'

    - name: Install uv and dependencies
      run: |
        pip install uv
        uv pip install --system -r ci_requirements.txt

    - name: Install PyTorch 
      run: uv pip install torch==2.8.0 torchvision==0.23.0 --index-url https://download.pytorch.org/whl/cpu

    - name: Identify new submissions to evaluate
      id: new_files
      run: |
        # Find all .py files added in the latest commit
        NEW_FILES=$(git diff --name-only HEAD^ HEAD | grep 'submissions/.*\.py' | tr '\n' ' ')
        echo "NEW_FILES=$NEW_FILES" >> $GITHUB_OUTPUT
        
    - name: Evaluate and append new submissions to submissions_full.csv
      # Loop through the files merged in the PR
      run: |
        for SUBMISSION_FILE in ${{ steps.new_files.outputs.NEW_FILES }}; do
          echo "Processing new submission: $SUBMISSION_FILE"
          python evaluate_submission.py --submission "$SUBMISSION_FILE" --append-to submissions_full.csv
        done
        
    - name: Generate and commit new leaderboard.csv
      # The generate script reads submissions_full.csv and creates leaderboard.csv
      run: python generate_leaderboard.py

    - name: Push updated CSV files
      uses: stefanzweifel/git-auto-commit-action@v5
      with:
        commit_message: "ðŸ¤– Leaderboard updated with new submissions"
        file_pattern: 'submissions_full.csv leaderboard.csv'
        skip_dirty_check: true

